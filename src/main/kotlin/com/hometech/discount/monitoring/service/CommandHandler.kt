package com.hometech.discount.monitoring.service

import com.hometech.discount.monitoring.domain.exposed.entity.Item
import com.hometech.discount.monitoring.domain.exposed.entity.User
import com.hometech.discount.monitoring.parser.ParserType
import kotlinx.coroutines.ObsoleteCoroutinesApi
import org.jetbrains.exposed.sql.transactions.transaction
import org.springframework.dao.EmptyResultDataAccessException
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.objects.Update

@ObsoleteCoroutinesApi
@Component
class CommandHandler(private val itemService: ItemService) {

    fun handleCommand(update: Update): String {
        val args = update.message.text.trim().split(" ")
        if (args.isEmpty()) return BAD_COMMAND
        return when (args[0]) {
            "/help", "/start" -> welcomeMessage
            "/shops" -> allShops()
            "/goods" -> goods(update.userId())
            "/unsubscribe" -> if (args.size != 2 && args[1].isEmpty()) BAD_COMMAND else unsubscribe(args[1], update.userId())
            "/unsubscribe_all" -> unsubscribeAll(update.userId())
            else -> BAD_COMMAND
        }
    }

    private fun allShops(): String {
        return ParserType.allShops.joinToString(separator = "\n")
    }

    private fun goods(userId: Long): String {
        return transaction {
            User.findById(userId)?.items?.joinToString(separator = "\n") { it.asString() } ?: ""
        }
    }

    private fun unsubscribe(url: String, userId: Long): String {
        return try {
            transaction { itemService.removeSubscriptionByUrl(url, userId) }
            SUCCESS
        } catch (e: EmptyResultDataAccessException) {
            BAD_COMMAND
        }
    }

    private fun unsubscribeAll(userId: Long): String {
        transaction { itemService.clearSubscriptions(userId) }
        return SUCCESS
    }

    private fun Item.asString(): String = "\uD83D\uDCB8 ${this.name}, ${this.url}"
    private fun Update.userId(): Long = this.message.from.id

    companion object {
        val welcomeMessage = """–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç.
            | –Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö.
            | –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é? –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª –¥–ª—è –≤–∞—Å —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä, –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å —Å–∫–∏–Ω—É—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'https://some-shop.com/item123'
            | –ï—Å–ª–∏ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–æ —è –æ—Ç–≤–µ—á—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.'.
            | –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º –∂–µ —Å–ª—É—á–∞–µ, —è —Å–∫–∞–∂—É, —á—Ç–æ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä.
            | üìå –ß—Ç–æ–±—ã –µ—â–µ —Ä–∞–∑ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É '/help'
            | üìå –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É '/shops'
            | üìå –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω, –≤–≤–µ–¥–∏ '/goods'
            | üìå –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ '/unsubscribe https://some-shop.com/item123'
            | üìå –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –≤–≤–µ–¥–∏ '/unsubscribe_all'
        """.trimMargin()

        val commands = listOf("/start", "/help", "/shops", "/goods", "/unsubscribe", "/unsubscribe_all")

        const val BAD_COMMAND = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç–æ—á–Ω–∞—è %("
        const val SUCCESS = "–£—Å–ø–µ—à–Ω–æ!"
    }
}
