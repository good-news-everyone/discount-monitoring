package com.hometech.discount.monitoring.service.chat

import com.hometech.discount.monitoring.domain.exposed.entity.Item
import com.hometech.discount.monitoring.domain.exposed.entity.User
import com.hometech.discount.monitoring.domain.model.CommandHandlingData
import com.hometech.discount.monitoring.parser.ParserType
import com.hometech.discount.monitoring.service.ItemService
import kotlinx.coroutines.ObsoleteCoroutinesApi
import org.jetbrains.exposed.sql.transactions.transaction
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.objects.Update

@ObsoleteCoroutinesApi
@Component
class CommandHandler(
    private val itemService: ItemService,
    private val keyboardProvider: KeyboardProvider
) {

    fun handleCommand(update: Update): CommandHandlingData {
        val args = update.message.text.trim().split(" ")
        if (args.isEmpty()) return CommandHandlingData(BAD_COMMAND_REPLY, keyboardProvider.baseCommands)
        return when (args[0].lowercase()) {
            HELP_COMMAND, START_COMMAND -> CommandHandlingData(welcomeMessage)
            SHOPS_COMMAND -> CommandHandlingData(allShops())
            GOODS_COMMAND -> {
                val items = goods(update.userId())
                val text = if (items.isEmpty()) GOODS_EMPTY_COMMAND_REPLY else GOODS_FOUND_COMMAND_REPLY
                CommandHandlingData(text, keyboardProvider.itemsToUrlButtons(items))
            }
            UNSUBSCRIBE_ALL_COMMAND -> CommandHandlingData(unsubscribeAll(update.userId()))
            UNSUBSCRIBE_COMMAND -> CommandHandlingData(UNSUBSCRIBE_COMMAND_REPLY, keyboardProvider.userItems(userId = update.userId()))
            else -> CommandHandlingData(BAD_COMMAND_REPLY, keyboardProvider.baseCommands)
        }
    }

    private fun allShops(): String {
        return ParserType.allShops.joinToString(separator = "\n")
    }

    private fun goods(userId: Long): List<Item> {
        return transaction {
            User.findById(userId)?.items?.toList() ?: listOf()
        }
    }
    private fun unsubscribeAll(userId: Long): String {
        transaction { itemService.clearSubscriptions(userId) }
        return SUCCESS_COMMAND_REPLY
    }

    private fun Update.userId(): Long = this.message.from.id

    companion object {
        val welcomeMessage = """–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç.
            |–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö.
            |–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é? –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª –¥–ª—è –≤–∞—Å —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä, –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å —Å–∫–∏–Ω—É—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'https://some-shop.com/item123'
            |–ï—Å–ª–∏ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–æ —è –æ—Ç–≤–µ—á—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.'.
            |–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º –∂–µ —Å–ª—É—á–∞–µ, —è —Å–∫–∞–∂—É, —á—Ç–æ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä.
            | üìå –ß—Ç–æ–±—ã –µ—â–µ —Ä–∞–∑ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É '/help'
            | üìå –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É '/shops'
            | üìå –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω, –≤–≤–µ–¥–∏ '/goods'
            | üìå –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ '/unsubscribe https://some-shop.com/item123'
            | üìå –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –≤–≤–µ–¥–∏ '/unsubscribe_all'
        """.trimMargin()

        val commands = listOf(START_COMMAND, HELP_COMMAND, SHOPS_COMMAND, GOODS_COMMAND, UNSUBSCRIBE_ALL_COMMAND, UNSUBSCRIBE_COMMAND)

        const val BAD_COMMAND_REPLY = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç–æ—á–Ω–∞—è üí©"
        const val SUCCESS_COMMAND_REPLY = "–£—Å–ø–µ—à–Ω–æ!"
        const val GOODS_EMPTY_COMMAND_REPLY = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
        const val GOODS_FOUND_COMMAND_REPLY = "–í–æ—Ç –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –º—ã –Ω–∞—à–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:"
        const val UNSUBSCRIBE_COMMAND_REPLY = "–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è (–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã):"
    }
}

const val START_COMMAND = "/start"
const val HELP_COMMAND = "/help"
const val SHOPS_COMMAND = "/shops"
const val GOODS_COMMAND = "/goods"
const val UNSUBSCRIBE_COMMAND = "/unsubscribe"
const val UNSUBSCRIBE_ALL_COMMAND = "/unsubscribe_all"
